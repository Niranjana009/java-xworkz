1.  Why is Java not a pure object oriented language?

			
			because we use premitive data types.



2. Pointers are used in C/ C++. Why does Java not make use of pointers?

		In c / c++ memory allocation and address directed by using the pointers(Explictly), but in java memory allocation is done implicity.
		the memory allocation is in C/C++ for 32 and 64bit is different. As Java have common memory allocation for both 32bit and 64bit architecture.
		



4. How is an infinite loop declared in Java?
		
		Infinite loop can be defind as "where the set statements inside the contol statements , which never come out of it".will excute indefintely.
		
		for e.g:
			public static void main(){
				int x = 1;
				
				while(x>0){
				
					S.O.P("Inside Infinte loop");
					
				}
			
			
			}




5. Can the main method be Overloaded?
	yes






6. Why is the main method static in Java?
	Because all  fucntions, varibale using static keywords defind in the classes are loads first, while the class loading and JVM looks for the main method for excution the program.  So main method is static in Java
	


7. Difference between static methods, static variables, and static classes in java.

				static methods:
						-These methods are declared using static keywords.
						-These methods are loads at the time of class loading.
						-these statements and variables inside the static method will destory after excution of that method.
				
						
				
				Static variables:
						-These variables are declared outside the method and inside the class using static keywords.
						-These varibles are loads at the time of class loading.
						-Single copy is created where which shared among the all instances.
						-these variables will destory after excution of the class.
						
						E.g: when we distribute single copy of paper to group of people , if people start modifying the inside the paper
							 which will be there in all instances. 
				
				Static classes:
						-These classes are declared using static keywords.
						-These classes are loads at the time of class loading.
				


8. What do you get in the Java download file? How do they differ from one another?
     
	 I didnt get what is Java download file.

	Assuming that , .JAVA, .CLASS. files, where we write the code in the .java files and when we complie whihc is converted into the Byte code. where interperter helps to execute those files.
	


9. What are the Memory Allocations available in Java?

		 class memory area: used for class methods.
		 Heap memory: used for dynamic / runtime.
		 Stack memory: used for local variables, memory will be destoryed once completeing / execution of the methods.
		 PC register : for count the JVM execution
		 
		 

10. Differentiate between instance and local variables.


			Instance:
				1.these variables are declared inside the class and outside the main method.
				2.As name say these variables are instance specific and which is not shared among the all instance.
				3.these variables acts as global , available throgh the class.
			
			
			Local:
				1.these variables are declared outside the class and inside the main method.
				2.these variables destoryed once completeing the methods excution.
				3.these are available only inside specific methods, cant access outside of it.




11 What happens when the main() isn't declared as static?

			which not loads, when time of the class loading.



12 What is JDK? Mention the variants of JDK?
			Java development Kit, which includes JVM(java virtual machine), JRE(Java runtime environment)
			which is different for the difference OS(Linux, Windows and Mac).
			which includes javac, rt files, ext files, java utilities files , java io fies.compilers


13 What is the difference between JDK, JRE, and JVM?



JVM (Java Virtual Machine) 
It is called a virtual machine because it 
doesn't phyically exist. bytecode can be executed. 


JRE
JRE Java Runtime Envirnoment. which are used for developing Java applications. It is used
provide the runtime environment. It is the implementation of JVM. It physically exists. It contains
a set of libraries + other files that JVM uses at runtime. 

	

JDK
The Java Development Kit(JDK) is a software development
environment which is used to develop Java applications. It phyically exists. It
contains JRE + development tools.

The JDK contains JVM and interpreter/loader (java),a
compiler(Javac), Javadoc,etc.




14 Can "this" and "super" keywords be used together?

	No.



15 Explain the Diamond Problem

		Diamond problem can see in the Hybirid inhertance type,  which is combination of multiple inheritance with other inhertance type.
		
		E.g
		
				class A{																			
					say(){
						s.o.p("Hi");
					}
				}
				
				class B{
					say(){
						s.o.p("Hello");
					}
				}
		
		
				class C extend A, B{
					say();// errorr  unable to call say(); class C gets confused
				}
														=
													   = =
													  =   =
													 =     =
													=	    =
													 =     =
													   =  =
													    ==




16 What is polymorphism? Explain how to achieve Polymorphism in java with on Example program


		As names says using different types executing the actions
				
				two types:
					1. Method overloading (compiletime): Where same methods can call with have diffrent datatypes and different numbers parameters.
						e,g
								add(int a, int b){
								return a+b;
								}
								
								add(int a, float b){
								return a+b;
								}
								
								add(int a, int b, int c){
								return a+b+c;
								}
					
					
					2. Method overriding (Runtime): where we can change the implementation of methods
						e.g
						
						class Bank{
							void interest(){
							s.o.p("Bank interest is 10%");
							}
						}
						
						class HDFC extends Bank{
						void interest(){
							s.o.p("HDFC interest is 9%");
							}
						}
						
						class SBI{
						void interest(){
							s.o.p("SBI interest is 8%");
							}
						}





17 What is Abstraction? Explain how to achieve Polymorphism in java with on Example program
			Abstraction is used to show functionality and hide implementation from the user. like e.g sms, user know hoe to send /recive sms, dont know the internal implementtaion of sms.
			
			
			E,g:
			abstract class Demo{
				abstract void demo();
			}
			
			class Main_Ex extends Demo{
					void demo(){
						s.o.p("Abstarct demo");
					}
			}




18 What is Encapsulation? Explain how to achieve Polymorphism in java with on Example program /// not completed


		Not completed in course





19 Difference between Abstract class and Interface
		Abstract class:
			1. defind with abstract keyword.
			2. show functionality and hide implementation from the user.
					
		Interface class:
			1. defind using interface keyword
			2. all methods inside interface are default abstract methods.
			3. which adopts properties from using implements keyword.
			4. whihc help to overcome diamond problem.



20 What is method overloading?

1. Method overloading (compiletime): Where same methods can call with have diffrent datatypes and different numbers parameters.
						e,g
								add(int a, int b){
								return a+b;
								}
								
								add(int a, float b){
								return a+b;
								}
								
								add(int a, int b, int c){
								return a+b+c;
								}


21 What is method overriding?

Method overriding (Runtime): where we can change the implementation of methods
						e.g
						
						class Bank{
							void interest(){
							s.o.p("Bank interest is 10%");
							}
						}
						
						class HDFC extends Bank{
						void interest(){
							s.o.p("HDFC interest is 9%");
							}
						}
						
						class SBI{
						void interest(){
							s.o.p("SBI interest is 8%");
							}
						}





22 Can we override the static method in java?



No 




23 Write Rules for method overriding in java

- should have is a relationship.
- Method name should be same.
- should not be static methods , we cant override static methods.



Method overriding (Runtime): where we can change the implementation of methods
						e.g
						
						class Bank{
							void interest(){
							s.o.p("Bank interest is 10%");
							}
						}
						
						class HDFC extends Bank{
						void interest(){
							s.o.p("HDFC interest is 9%");
							}
						}
						
						class SBI{
						void interest(){
							s.o.p("SBI interest is 8%");
							}
						}


24 What is composition?
		compositoin is defind as the "Has a relationship", where the class acquires the property of other classes.


25. What is method overloading?
1. Method overloading (compiletime): Where same methods can call with have diffrent datatypes and different numbers parameters.
						e,g
								add(int a, int b){
								return a+b;
								}
								
								add(int a, float b){
								return a+b;
								}
								
								add(int a, int b, int c){
								return a+b+c;
								}






26. write a program to calculate the square root of a number without using the Math.sqrt() function of JDK.

      //



27. What is a Constructor? We can overload the constructor?
				its special type of methods, which should be same as class name and its dont have retur types. 
				
				yes, we can overload constructor.
				
				E.g
				
				class Apple{
				
					Apple(){
					s.o.p("Default constructor");
					}
				}



28. Explain the different types of Constructor?

				- Default constructor: it is implicity defind by compiler , when we create objects.
				
					class Apple{
				
					Apple(){
					s.o.p("Default constructor");
					}
				}
				- parameterized constructor: the constructor passed by the arguments,when we create objects
				class Apple{
				
					Apple(int num){
					s.o.p("parameterized constructor");
					}
				}



29.Explain the different types of Inheritance? Give Example for each

		- Single Inheritance
		
				one class acquire the property of the another class. here we can acquire properties by using extends keyword.
				
				e.g I20 and I20spotrz
				
				class I20{
					void name(){
						s.o.p ("I20 cars");
					}
				}
				
				class I20spotrz extends I20{
					void name(){
						s.o.p ("I20 sprozt extends from I20");
					}
				}
				

		- Multilevel Inheritance
				one class acquire the property of the another class, which third class acquires properties from the second class whhich have access to first class as well.
				
				e.g:
				e.g Hyundai , I20 and I20spotrz
				
				class Hyundai{
					void name(){
						s.o.p ("Hyundai");
					}
				}
				
				class I20 extends Hyundai{
					void name(){
						s.o.p ("I20 sprozt extends from Hyundai");
					}
				}
				
				class I20spotrz extends I20{
					void name(){
						s.o.p ("I20 sprozt extends from I20");
					}
				}
				
		
		- Hierarichal Inheritance
			mulitple class acquire property from same class.
			e,g:
			class Car{
					void name(){
						s.o.p ("Car");
					}
				}
				
				class Hyundai extends Car{
					void name(){
						s.o.p ("Hyundai sprozt extends from Car");
					}
				}
				
				class Honda extends Car{
					void name(){
						s.o.p ("Honda  extends from Car");
					}
				}
				
		
		- Multiple Inheritance // not possible using class , we can achive by using interface
			same class acquire property from multiple classes
		 e.g:
			class A{																			
					say(){
						s.o.p("Hi");
					}
				}
				
				class B{
					say(){
						s.o.p("Hello");
					}
				}
		
		
				class C extend A, B{
					say();// errorr  unable to call say(); class C gets confused
				}
				
				
		- Hybirid Inheritance // not possible using class , we can achive by using interface
				Diamond problem can see in the Hybirid inhertance type,  which is combination of multiple inheritance with other inhertance type.